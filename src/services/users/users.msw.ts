/**
 * Generated by orval v6.1.1 🍺
 * Do not edit manually.
 * Nightborn Dev Exercise API
 * Swagger for Nightborn-dev-exercise-back-end project.

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'
import {
  User,
  Role
} from '../../types/dtos'

export const getGetAllMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({CreatedAt: faker.helpers.randomize([faker.random.word(), undefined]), DeletedAt: faker.helpers.randomize([faker.random.word(), undefined]), ID: faker.helpers.randomize([faker.datatype.number(), undefined]), UpdatedAt: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), first_name: faker.random.word(), last_name: faker.random.word(), password: faker.random.word(), role: faker.helpers.randomize(Object.values(Role))})))

export const getAddUserMock = () => ({CreatedAt: faker.helpers.randomize([faker.random.word(), undefined]), DeletedAt: faker.helpers.randomize([faker.random.word(), undefined]), ID: faker.helpers.randomize([faker.datatype.number(), undefined]), UpdatedAt: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), first_name: faker.random.word(), last_name: faker.random.word(), password: faker.random.word(), role: faker.helpers.randomize(Object.values(Role))})

export const getGetUserByIdMock = () => ({CreatedAt: faker.helpers.randomize([faker.random.word(), undefined]), DeletedAt: faker.helpers.randomize([faker.random.word(), undefined]), ID: faker.helpers.randomize([faker.datatype.number(), undefined]), UpdatedAt: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), first_name: faker.random.word(), last_name: faker.random.word(), password: faker.random.word(), role: faker.helpers.randomize(Object.values(Role))})

export const getUpdateUserMock = () => ({CreatedAt: faker.helpers.randomize([faker.random.word(), undefined]), DeletedAt: faker.helpers.randomize([faker.random.word(), undefined]), ID: faker.helpers.randomize([faker.datatype.number(), undefined]), UpdatedAt: faker.helpers.randomize([faker.random.word(), undefined]), email: faker.random.word(), first_name: faker.random.word(), last_name: faker.random.word(), password: faker.random.word(), role: faker.helpers.randomize(Object.values(Role))})

export const getUsersMSW = () => [
rest.get('*/api/v1/users', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetAllMock()),
        )
      }),rest.post('*/api/v1/users', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAddUserMock()),
        )
      }),rest.get('*/api/v1/users/:id', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserByIdMock()),
        )
      }),rest.patch('*/api/v1/users/:id', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getUpdateUserMock()),
        )
      }),]
